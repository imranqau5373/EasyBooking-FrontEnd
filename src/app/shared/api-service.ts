/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>t
//     Generated using the NSwag toolchain v13.1.2.0 (NJsonSchema v10.0.24.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';


export const API_BASE_URL = new InjectionToken<string>('http://localhost:53382');

@Injectable()
export class HttpService {

    private http: HttpClient;
    private baseUrl: string = "http://localhost:53382";
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:53382";
    }

    /**
     * @param authorization The bearer token
     * @return Success
     */
    index(authorization: string): Observable<string> {
        let url_ = "http://localhost:53382/api/Home";
        url_ = url_.replace(/[?&]$/, "");

        const httpOptions = {
            headers: new HttpHeaders({
              'Content-Type':  'application/json',
              'Authorization': 'bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJpbXJhbi5raGFuQHN5bmVyZ3ktaXQuY29tIiwianRpIjoiMmEzOWU0ZjQtNjA1NC00MTdmLWEzMTItMmZjNTkxMGIyNWM1IiwiaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvd3MvMjAwNS8wNS9pZGVudGl0eS9jbGFpbXMvbmFtZWlkZW50aWZpZXIiOiIxIiwiZXhwIjoxNjAyMTY0OTQ4LCJpc3MiOiJodHRwczovL2xvY2FsaG9zdDo0NDM2OSIsImF1ZCI6Imh0dHBzOi8vbG9jYWxob3N0OjQ0MzY5In0._MpoU97xGr40stdPeu4oAS5ZeWxESKADU1pu6I4VzsA'
            })
          };

        return this.http.request("get", url_, httpOptions).pipe(_observableMergeMap((response_ : any) => {
            return this.processIndex(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIndex(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processIndex(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            // return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            // return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            let result200: any = null;
            return _observableOf(result200);
            //}));
        }
        return _observableOf<string>(<any>null);
    }

    /**
     * @param signupCommand (optional) 
     * @param authorization The bearer token
     * @return Success
     */
    signUp(signupCommand: SignupCommand | null | undefined, authorization: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Identity/SignUp";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(signupCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "", 
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSignUp(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSignUp(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processSignUp(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param activationCommand (optional) 
     * @param authorization The bearer token
     * @return Success
     */
    activate(activationCommand: AccountActivationCommand | null | undefined, authorization: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Identity/Activate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(activationCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "", 
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processActivate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processActivate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processActivate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param signInCommand (optional) 
     * @param authorization The bearer token
     * @return Success
     */
    signIn(signInCommand: SignInCommand | null | undefined, authorization: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Identity/SignIn";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(signInCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "", 
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSignIn(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSignIn(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processSignIn(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

export class SignupCommand implements ISignupCommand {
    companyName?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    companyPrivateUrl?: string | undefined;
    contactName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    password?: string | undefined;
    confirmPassword?: string | undefined;
    timezone?: string | undefined;
    subscribeNewsLetter?: boolean | undefined;

    constructor(data?: ISignupCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.companyName = data["companyName"];
            this.companyPrivateUrl = data["companyPrivateUrl"];
            this.contactName = data["contactName"];
            this.email = data["email"];
            this.phone = data["phone"];
            this.password = data["password"];
            this.confirmPassword = data["confirmPassword"];
            this.timezone = data["timezone"];
            this.subscribeNewsLetter = data["subscribeNewsLetter"];
        }
    }

    static fromJS(data: any): SignupCommand {
        data = typeof data === 'object' ? data : {};
        let result = new SignupCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["companyName"] = this.companyName;
        data["companyPrivateUrl"] = this.companyPrivateUrl;
        data["contactName"] = this.contactName;
        data["email"] = this.email;
        data["phone"] = this.phone;
        data["password"] = this.password;
        data["confirmPassword"] = this.confirmPassword;
        data["timezone"] = this.timezone;
        data["subscribeNewsLetter"] = this.subscribeNewsLetter;
        return data; 
    }
}

export interface ISignupCommand {
    companyName?: string | undefined;
    companyPrivateUrl?: string | undefined;
    contactName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    password?: string | undefined;
    confirmPassword?: string | undefined;
    timezone?: string | undefined;
    subscribeNewsLetter?: boolean | undefined;
}

export class AccountActivationCommand implements IAccountActivationCommand {
    activationToken?: string | undefined;
    email?: string | undefined;

    constructor(data?: IAccountActivationCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.activationToken = data["activationToken"];
            this.email = data["email"];
        }
    }

    static fromJS(data: any): AccountActivationCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AccountActivationCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["activationToken"] = this.activationToken;
        data["email"] = this.email;
        return data; 
    }
}

export interface IAccountActivationCommand {
    activationToken?: string | undefined;
    email?: string | undefined;
}

export class SignInCommand implements ISignInCommand {
    email?: string | undefined;
    password?: string | undefined;
    rememberMe?: boolean | undefined;

    constructor(data?: ISignInCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.email = data["email"];
            this.password = data["password"];
            this.rememberMe = data["rememberMe"];
        }
    }

    static fromJS(data: any): SignInCommand {
        data = typeof data === 'object' ? data : {};
        let result = new SignInCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        data["rememberMe"] = this.rememberMe;
        return data; 
    }
}

export interface ISignInCommand {
    email?: string | undefined;
    password?: string | undefined;
    rememberMe?: boolean | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}